@inject DialogService DialogService
@using kassablad.app.Shared
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json @*https://docs.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-6.0&pivots=webassembly *@

<RadzenCard class="@ClassName" @onclick="@openDialog">
    <div class="coinWrapper">
        <div class="coin">
            @Text
            <sub>
                @Valuta
            </sub>
        </div>
    </div>
    <div class="coinCount">
        @KassaNom.Amount
    </div>
</RadzenCard>

@code {
    private string? errorMessage;
    [Parameter]
    public string? ClassName { get; set; }
    [Parameter]
    public string? Text { get; set; }
    [Parameter]
    public string? Valuta { get; set; }
    [Parameter]
    public KassaNominationDto KassaNom { get; set; } = new KassaNominationDto();
    [Parameter]
    public EventCallback<int> OnCoinUpdated { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //try to get kNomination
        var content = await getKassaNomination(KassaNom.KassaId, KassaNom.NominationId); 
        if(content.KassaNominationId != 0)
        {
            KassaNom.KassaNominationId = content.KassaNominationId;
            KassaNom.Amount = content.Amount;
            KassaNom.Total = content.Amount * content.Multiplier;
        }
        else // if kassa but no kassa nomination yet
        {
            Console.WriteLine($"KassaNom: {System.Text.Json.JsonSerializer.Serialize(KassaNom)}");
            KassaNom = await createKassaNomination(KassaNom);
        }
    }
    public async Task openDialog() {
        var result = await DialogService.OpenAsync("Hoeveelheid", ds =>
            @<div>
                <p class="mb-4">
                    â‚¬ @KassaNom.Multiplier x  
                    <RadzenNumeric TValue="int" @bind-Value=@KassaNom.Amount Change=@(args => OnChange())/>    
                </p>
                <div class="row">
                    <div class="col">
                        <RadzenButton Text="Ok" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;" />
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />
                    </div>
                </div>
            </div>,
            new DialogOptions() { 
                CloseDialogOnOverlayClick = true,
                AutoFocusFirstElement = false 
            });
    
        // Console.WriteLine($"Dialog result: {result}");
    }
    //private async Task SaveNomAsync()
    public async void OnChange()
    {
        Console.WriteLine($"KassaNominationId:(Coin) {KassaNom.KassaNominationId}");
        if(KassaNom.KassaNominationId is 0) //create the kassanomination
        {
            //Post kassanom
            Console.WriteLine("Posting");
            KassaNom = await createKassaNomination(KassaNom);
        }
        else // update the kassanomination
        {
            //Put KassaNom
            Console.WriteLine("Putting");
            Console.WriteLine($"Updating KassaNomination: {KassaNom.KassaNominationId}");
            var result = await updateKassaNomination(KassaNom);
        }

        // await OnCoinUpdated.InvokeAsync(KassaNom.KassaNominationId);
    }
    private async Task<KassaNominationDto> createKassaNomination(KassaNominationDto kassaNom)
    {
        var content = new KassaNominationDto();
        using var response = await Http.PostAsJsonAsync("api/KassaNomination", kassaNom);
        if(!response.IsSuccessStatusCode)
        {
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error with creating the kassaNomination!(Coin) {errorMessage}");
        }
        else
        {
            Console.WriteLine($"Success creating kass nom!(Coin)");
            content = await response.Content.ReadFromJsonAsync<KassaNominationDto>()
                ?? new KassaNominationDto();
        }

        return content;
    }
    private async Task<bool> updateKassaNomination(KassaNominationDto kassaNom)
    {
        using var response = await Http.PutAsJsonAsync($"api/KassaNomination/{kassaNom.KassaNominationId}", kassaNom);
        if(!response.IsSuccessStatusCode)
        {
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error updating the kassaNomination!(Coin) {errorMessage}");
            return false;
        }
        else
        {
            Console.WriteLine($"Success updating KassaNomination!(Coin) id: {kassaNom.KassaNominationId}");
        }

        return true;
    }
    private async Task<KassaNominationDto> getKassaNomination(int KassaId, int NominationId)
    {
        var content = new KassaNominationDto();
        using var response = await Http.GetAsync($"api/KassaNomination/byKassaId?kassaId={KassaId}&nominationId={NominationId}");
        if(!response.IsSuccessStatusCode)
        {
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"No KassaNomination Exists!(Coin) {errorMessage}");
        }
        else
        {
            content = await response.Content.ReadFromJsonAsync<KassaNominationDto>()
                ?? new KassaNominationDto();
            Console.WriteLine($"Success Getting KassaNomination!(Coin) id: {content.KassaNominationId}");
        }

        return content;
    }
}