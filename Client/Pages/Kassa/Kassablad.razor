@page "/kassablad"
@page "/kassablad/{KassaContainerId:int?}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using kassablad.app.Shared
@attribute [Authorize]
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json @*https://docs.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-6.0&pivots=webassembly *@
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject ILogger<KassaContainerDto> Logger

<PageTitle>Kassablad</PageTitle>

<h1>Kassablad</h1>

<p>Welkom! Tel je kasse en laat het zuipfestijn beginnen!!!</p>

<div class="content-container">
    <h2>Tel je kassa</h2>
    <EditForm Model=@kcDto OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <RadzenCard class="kassabladCard">
            <h4>Activiteit</h4>
            <RadzenDropDown 
                AllowClear="true" 
                TValue="string" 
                Data=@(activiteiten) 
                id="activiteit"
                @bind-Value="kcDto.Activiteit"
            />
        </RadzenCard>
        <br/>
        <RadzenButton
            IsBusy=@busy 
            Text="Start" 
            type="submit" 
        />
    </EditForm>
</div>

@code {
    private string? errorMessage;
    [Parameter]
    public int? KassaContainerId { get; set; }
    private KassaContainerDto kcDto = new() {
        Activiteit = "Café"
    };
    List<string> activiteiten = new List<string>() {
            "Café",
            "Foif",
            "Fiest",
            "Opkuis",
            "Ander"
        };
    bool busy;
    async Task OnBusyClick()
    {
        busy = true;
        await Task.Delay(2000);
        busy = false;
    }
    private async Task HandleValidSubmit()
    {
        using var response = await Http.PostAsJsonAsync("api/KassaContainer", kcDto);

        if(!response.IsSuccessStatusCode)
        {
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");
            return;
        }
        else
        {
            Console.WriteLine($"Success! Rerouting");
            NavigationManager.NavigateTo("/beginkassa", false);
        }

        var content = await response.Content.ReadFromJsonAsync<KassaContainerDto>();
    }
}