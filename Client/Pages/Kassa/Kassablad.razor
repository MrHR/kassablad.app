@page "/kassablad"
@page "/kassablad/{KassaContainerId:int?}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using kassablad.app.Shared
@attribute [Authorize]
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json @*https://docs.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-6.0&pivots=webassembly *@
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject ILogger<KassaContainerDto> Logger

<PageTitle>Kassablad</PageTitle>

<h1>Kassablad</h1>

<p>Welkom! Tel je kasse en laat het zuipfestijn beginnen!!!</p>

<div class="content-container">
    @* TODO: Scan Kassa_Naam => Check kassa state, open kassa state where last user left off *@
    <h2>Tel je kassa</h2>
    <EditForm Model=@kcDto OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <RadzenCard class="kassabladCard">
            <h4>Activiteit</h4>
            <RadzenDropDown 
                AllowClear="true" 
                TValue="string" 
                Data=@(activiteiten) 
                id="activiteit"
                @bind-Value="kcDto.Activiteit"
            />
        </RadzenCard>
        <br/>
        <RadzenButton
            IsBusy=@busy 
            Text="Start" 
            type="submit" 
        />
    </EditForm>
</div>

@code {
    bool busy;
    private string? errorMessage;
    [Parameter]
    public int? KassaContainerId { get; set; }
    private KassaContainerReturnDto kcDto = new() 
    {
        Activiteit = "Café"
    };
    List<string> activiteiten = new List<string>() 
    {
        "Café",
        "Foif",
        "Fiest",
        "Opkuis",
        "Ander"
    };
    protected override async Task OnInitializedAsync()
    {
        if(KassaContainerId != null)
        {
            using var response = await Http.GetAsync($"api/KassaContainer/{KassaContainerId}");

            if(!response.IsSuccessStatusCode)
            {
                errorMessage = response.ReasonPhrase;
                Console.WriteLine($"There was an error getting the kassacontainer! {errorMessage}");
                KassaContainerId = null;
            }
            else
            {
                var content = await response.Content.ReadFromJsonAsync<KassaContainerReturnDto>() 
                    ?? new KassaContainerReturnDto();
                content.Activiteit = content.Activiteit == null ? kcDto.Activiteit : content.Activiteit;
                kcDto = content;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/kassascan", false);
        }
    }
    private async Task HandleValidSubmit()
    {
        busy = true;
        kcDto.BeginUur = DateTime.Now;
        kcDto.State = "B";
        using var response = await Http.PutAsJsonAsync($"api/KassaContainer/{kcDto.KassaContainerId}", kcDto);

        if(!response.IsSuccessStatusCode)
        {
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error updating the kassacontainer! {errorMessage}");
            busy = false;
            return;
        }
        else
        {
            busy = false;
            NavigationManager.NavigateTo($"/kassa/{kcDto.KassaContainerId}", false);
        }

        // var content = await response.Content.ReadFromJsonAsync<KassaContainerReturnDto>();
    }
}