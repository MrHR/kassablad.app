@page "/kassa/{KassaContainerId:int?}"
@page "/kassa"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using kassablad.app.Shared
@attribute [Authorize]
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json @*https://docs.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-6.0&pivots=webassembly *@
@using Microsoft.Extensions.Logging
@using System.Text.Json
@inject ILogger<KassaContainerDto> Logger
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Kassa</PageTitle>

@if(kassaType == "beginKassa")
{
    <h1>BeginKassa</h1>
} else {
    <h1>EindKassa</h1>
}

<p>Tel je @(kassaType == "beginKassa" ? "beginkassa" : "eindkassa") even na!</p>

<div class="content-container">
    <div class="coinCounter">
        <CascadingValue Value="update">
            @foreach (var coin in nominations)
            {
                <Coin 
                    ClassName=@($"coin-{coin.Text}{coin.Nom.Currency} coinWrapperBox")
                    Text="@coin.Text"
                    Valuta="@coin.Nom.Currency"
                    KassaNom="@(new KassaNominationDto 
                    { 
                        Amount = coin.DefaultAmount,
                        NominationId = coin.NominationId, 
                        Multiplier = coin.Nom.Multiplier,
                        KassaId = kassa.KassaId,
                        Total = coin.Nom.Multiplier * coin.DefaultAmount
                    })"
                    OnCoinUpdated="@CoinUpdated"
                />
            }
            @* Is to be used when adding total => doesn't work yet 
            <Coin 
                ClassName=@($"coin-{nominations.First().Text}{nominations.First().Nom.Currency} coinWrapperBox")
                Text="@nominations.First().Text"
                Valuta="@nominations.First().Nom.Currency"
                KassaNom="@(new KassaNominationDto 
                { 
                    Amount = nominations.First().DefaultAmount,
                    NominationId = nominations.First().NominationId, 
                    Multiplier = nominations.First().Nom.Multiplier,
                    KassaId = kassa.KassaId,
                    Total = nominations.First().Nom.Multiplier * nominations.First().DefaultAmount
                })"
                OnCoinUpdated="CoinUpdated"
            /> *@
        </CascadingValue>
    </div>
    @* @if(kassa != null)
    {
        <KassaTotal KassaId="kassa.KassaId" @ref="kassaTotal" />
    } *@
    <RadzenButton Text="Kassa Geteld" class="btnKassaCounted" Click=@OnSubmit/>
</div>

@code {
    /**
    * Keep beginkassa data here
    * but sync object with databbase
    * when kassa = counted change status to counted
    **/

    string? kassaType = "beginKassa";
    private bool update = false;
    bool busy;
    private string? errorMessage;
    [Parameter]
    public int? KassaContainerId { get; set; }
    private KassaContainerReturnDto kcDto { get; set; } = new();
    private KassaDto? kassa { get; set; }
    private List<NominationDto> nominations = new List<NominationDto>();
    KassaTotal? kassaTotal;
    protected override async Task OnInitializedAsync()
    {
        //Get and Render noms
        try
        {
            using var nomResponse = await Http.GetAsync("api/nomination");
            if(!nomResponse.IsSuccessStatusCode)
            {
                errorMessage = nomResponse.ReasonPhrase;
                Console.WriteLine($"There was an error with loading the nominations! {errorMessage}");
            }
            else
            {
                Console.WriteLine("Success getting Nominations!(Kassa)");
                nominations = await nomResponse.Content.ReadFromJsonAsync<List<NominationDto>>() 
                    ?? new List<NominationDto>();
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(JsonSerializer.Serialize(ex));
        }

        //Check if kassacontainer exists
        if(KassaContainerId != null) //IF KassaContainer
        {
            //GET KassaContainer
            using var response = await Http.GetAsync($"api/KassaContainer/{KassaContainerId}");
            //On FAIL
            if(!response.IsSuccessStatusCode)
            {
                errorMessage = response.ReasonPhrase;
                Console.WriteLine($"There was an error getting the kassacontainer! {errorMessage}");
            }
            //On SUCCESS
            else 
            {
                kcDto = await response.Content.ReadFromJsonAsync<KassaContainerReturnDto>() 
                    ?? new KassaContainerReturnDto(); //map KassaContainer to object
                Console.WriteLine($"kassContainerDto: {SerializeMethod(kcDto)}");
                kassa = kcDto.lstKassaDtos.LastOrDefault() ?? null;

                // check to create beginkassa, eindkassa or just show the existing kassa
                if(kassa == null || kassa?.KassaId == 0) // create begin
                {
                    //TODO: Craete beginKassa
                    var kDto = await CreateKassaDto(kcDto, "beginKassa");
                    Console.WriteLine($"Created BeginKassa: {System.Text.Json.JsonSerializer.Serialize(kDto)}");
                    kassa = kDto;
                }
                else if(kcDto.State?.ToUpper() != kassa.Type?.ToUpper() && kcDto.State == "EindKassa") // create eind
                {
                    //TODO: Create EindKassa
                    var kDto = await CreateKassaDto(kcDto, "eindKassa");
                    Console.WriteLine($"Created EindKassa: {System.Text.Json.JsonSerializer.Serialize(kDto)}");
                    kassa = kDto;
                }

                kassaType = kassa?.Type;
                StateHasChanged(); //rerenders component after kassa is populated
                Console.WriteLine($"KassaType: {kassa.Type}");
                Console.WriteLine($"KassaContainer State: {kcDto.State}");
            }
        }
        else //IF no KassaContainer
        {
            NavigationManager.NavigateTo("/kassascan", false);
        }
    }
    private async Task<KassaDto> CreateKassaDto(KassaContainerReturnDto kcReturnDto, string type)
    {
        var content = new KassaDto();
        KassaDto kDto = new() 
        {
            KassaContainerId = kcReturnDto.KassaContainerId,
            Type = type
        };

        //Post the Kassa
        using var response = await Http.PostAsJsonAsync("api/Kassa", kDto);
        if(!response.IsSuccessStatusCode)
        {
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error with creating the kassa! {errorMessage}");

            return new KassaDto();
        }
        else
        {
            Console.WriteLine($"Success!");
            content = await response.Content.ReadFromJsonAsync<KassaDto>() ?? new KassaDto();
        }

        return content;
    }
    private async void OnSubmit()
    {
        //TODO: set kassaContainer state: if beginkassa set to eindkassa else set to info
        var state = "";
        if(kcDto.State == "BeginKassa") {
            state = "EindKassa";
        } else {
            state = "Info";
        }

        using var response = await Http
            .PutAsJsonAsync(
                $"api/kassaContainer/updateState?id={kcDto.KassaContainerId}&state={state}",
                kcDto);
        if(!response.IsSuccessStatusCode)
        {
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error with updating the kassacontainer state! {errorMessage}");
        }
        else
        {
            Console.WriteLine($"state: {state}");
            switch(state)
            {
                case "Info":
                    Console.WriteLine($"Rerouting to kassaInfo: {KassaContainerId}");
                    NavigationManager.NavigateTo($"/kassainfo/{KassaContainerId}", false);
                    break;
                case "EindKassa":
                    Console.WriteLine($"Routing to Eindkassa: {KassaContainerId}");
                    NavigationManager.NavigateTo($"/kassa/{KassaContainerId}", true);
                    break;
            }
        }
    }
    string SerializeMethod(KassaContainerReturnDto kcObject)
    {
        //serialization
        string serializedString = System.Text.Json.JsonSerializer.Serialize(kcObject);
        return serializedString;
    }
    protected async void CoinUpdated(int kassaNominationId)
    {
        var content = await kassaTotal?.getKassaNominations(kassa.KassaId);  
        if(content.Count() > 0)
        {
            //TODO: Calculate total
            kassaTotal?.calculateTotal(content);
        }
        else // if none found
        {
            Console.WriteLine($"No KassaNominations were found");
        }
    }
}